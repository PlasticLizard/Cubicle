==0.1.19
   *Fixed bug that caused cubicle to hang when grouping by days

==0.1.18
  *Bug fixes

==0.1.16
  *Added a set of default constants for expression templates, such as date_today, date_today_iso, date_today_utc_iso, etc.
  Also added the 'define' method to the query DSL (instead of simply the aggregation DSL) so that you can either define new
  named expressions or override an existing named expression or date constant in a query context, instead of only at the
  global level

==0.1.15
  *Added 'difference' calculated measure to aggregation DSL, used in the same was as 'ratio' - so, in your aggregation
  definition, you can do 'difference :big_diff, :measure_one, :measure_two'
  and the value of :big_diff will be measure_one - measure_two. Also monkey patched Mustache (per suggestion in the
  mailing list) to turn of HTML escaping, so that the triple-curly syntax should not be required when using operators
  in templated expressions.

==0.1.14
  *Incorporated the Mustache templating library into aggregation definitions allowing expression to reference previously
   defined dimensions, measures, or named expressions (using the syntax: define :expression_name, 'this.my_expression != "that"')
   Allows for definitions such as this:  avg :average_happy_defects, :expression=>'{{defects}} && this.type=="Happy"'
   Also available is 'time_now' to represent the Ruby's Time.now in the form of a javascript date, so '{{time_now}}' will
   become 'new Date(2342342)' where 2342342 is Time.now.to_i

==0.1.13
  *Previous feature broke ratios. Fixed now.

==0.1.12
  *Added distinct' option to 'count' measure, to allow measures which represent distinct counts of  given field/expression value.
  ONLY works when the value being distinctly counted is a string.

==0.1.11
  *Fixed a bug when filtering categorized dimensions in transient queries

==0.1.10
  *enhanced cubicle aggregation manager to transparently convert several of the basic mongo operators (such as $ne,
  $gt, $gte, etc) into javascript for use in the generated $where clause for transient queries. In practice, this
  means that you can define a measure as an expression, say dimension :month, :expression=>"'2010-01'", and then
  use that dimension name in a standard mongo driver compatible filter expression, without concern for whether
  your query is a transient query or a regular query - cubicle will do the appropriate conversion to javascript
  in the former case, translating :month=>{"$gte"=>"'2009-12'", "$lt"=>"'2010-02'"} into the functional equivalent of
  "$where"=>"'2010-01' >= '2009-12' && '2010-01' < '2010-02'". Actually, an inline function is used to reduce IO
  as repeating the expression for each comparison can get out of hand if your expression is large.

==0.1.9
  * Fixed problems with missing number in bucket intervals. Moved resolution of source measure javascript to
  * last moment, to ensure dynamic values don't get accidentally cached too early.

==0.1.8
 * Added 'bucketize' aliased as 'categorize' to cubicle DSL to allow dimensions to be created from bucketizing
   (categorizing based on name) a measure value.

==0.1.7
 * Minor bug fixes

==0.1.6
 *Added generic 'condition' argument to member definitions, which allows the specification of a JavaScript expression
  which will determine if the measure (or dimension) expression will be evaluated. This capability was available
  before via the :expression option, but using a :condition modifier allows for more straightforward (readable) measure
  definitions and separates the definition of the actual value from the conditions under which the value is valid.

==0.1.5
 * Added duration_since (aliased as elapsed, age_since) to calculate the time elapsed since any
   given timestamp and the current execution time of the query.

== 0.1.4
 * Cached aggregations were being stored on disk, but not properly utilized. This is now fixed.

== 0.1.3
* Formalized flat (Cubicle::Data::Table) and hierarchical (Cubicle::Data::Hierarchy) data results from cubicle queries,
  and added client side support for rolling up measure values in hierarchical data so that no matter how a given
  query is organized hierarchically, a summary of aggregated measure values for each level of data will be available. 
* Re-organized codebase
* Bug fixes

== 0.1.2
* Added ability to calculate durations between two timestamps
* Bug fixes

== 0.1.1
* Fixed a bug that required a logger to be initialized for the thing to work

== 0.1.0
* Initial release
